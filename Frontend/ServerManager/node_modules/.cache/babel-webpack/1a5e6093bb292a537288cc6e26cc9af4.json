{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ServeurService = /*#__PURE__*/(() => {\n  class ServeurService {\n    constructor(http) {\n      this.http = http;\n      this.URL = \"http://10.66.13.89:32000/\";\n    }\n\n    handleError(error) {\n      let errorMessage = 'Unknown error!';\n\n      if (error.error instanceof ErrorEvent) {\n        // Client-side errors\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side errors\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${\"we can't add this server check if your Address has aleady included !!!\"}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    getServeurs() {\n      return this.http.get(this.URL + \"serveur\");\n    }\n\n    getPing(ipAddress) {\n      return this.http.get(this.URL + \"serveur/ping/\" + ipAddress);\n    }\n\n    getServeur(id) {\n      return this.http.get(this.URL + \"serveur/\" + id);\n    }\n\n    addServeur(val) {\n      console.log(val);\n      return this.http.post(this.URL + \"serveur\", val).pipe(catchError(this.handleError));\n    }\n\n    deleteServeur(id) {\n      return this.http.delete(this.URL + \"serveur/\" + id);\n    }\n\n    updateServeur(val) {\n      return this.http.put(this.URL + \"serveur\", val);\n    }\n\n  }\n\n  ServeurService.ɵfac = function ServeurService_Factory(t) {\n    return new (t || ServeurService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ServeurService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServeurService,\n    factory: ServeurService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServeurService;\n})();","map":null,"metadata":{},"sourceType":"module"}